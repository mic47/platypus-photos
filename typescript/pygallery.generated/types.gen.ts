// This file is auto-generated by @hey-api/openapi-ts

export type AggregateQuery = {
    query: SearchQuery;
};

export type AnnotationOverlayInterpolateLocation = {
    t: 'InterpolatedLocation';
    location: ManualLocation;
};

export type t = 'InterpolatedLocation';

export type AnnotationOverlayNoLocation = {
    t: 'NoLocation';
};

export type t2 = 'NoLocation';

export type DateCluster = {
    example_path_md5: string;
    bucket_min: number;
    bucket_max: number;
    overfetched: boolean;
    min_timestamp: number;
    max_timestamp: number;
    avg_timestamp: number;
    total: number;
    group_by: DateClusterGroup;
};

export type DateClusterGroup = {
    address_name: string | null;
    country: string | null;
    camera: string | null;
    has_location: boolean | null;
};

export type DateClusterGroupBy = 'country' | 'camera' | 'has_location' | 'address_name';

export type DateClusterParams = {
    url: SearchQuery;
    group_by: Array<DateClusterGroupBy>;
    buckets: number;
};

export type DirectoryStats = {
    directory: string;
    total_images: number;
    has_location: number;
    has_timestamp: number;
    being_annotated: number;
    since: number | null;
    until: number | null;
};

export type ExceptionInfo = {
    exc_type: string | null;
    exc_val: string | null;
    exc_tb: Array<(string)> | null;
};

export type GalleryPaging = {
    page?: number;
    paging?: number;
};

export type GalleryRequest = {
    query: SearchQuery;
    paging: GalleryPaging;
    sort: SortParams;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Image = {
    md5: string;
    date: string | null;
    date_transformed: boolean;
    tags: {
    [key: string]: (number);
} | null;
    classifications: string | null;
    address: ImageAddress;
    dependent_features_last_update: number;
    latitude: number | null;
    longitude: number | null;
    altitude: number | null;
    manual_features: Array<(string)>;
    being_annotated: boolean;
    camera: string | null;
    software: string | null;
    version: number;
};

export type ImageAddress = {
    country: string | null;
    name: string | null;
    full: string | null;
};

export type ImageAggregation = {
    total: number;
    address: {
        [key: string]: (number);
    };
    tag: {
        [key: string]: (number);
    };
    classification: {
        [key: string]: (number);
    };
    cameras: {
        [key: string]: (number);
    };
};

export type ImageResponse = {
    has_next_page: boolean;
    omgs: Array<ImageWithMeta>;
    some_location: ManualLocation | null;
};

export type ImageSize = 'original' | 'medium' | 'preview';

export type ImageWithMeta = {
    omg: Image;
    predicted_location: PredictedLocation | null;
    paths: Array<PathSplit>;
};

export type JobDescription = {
    icon: string;
    total: string;
    id: number;
    type: string;
    replacements: string;
    time: number;
    latitude: number | null;
    longitude: number | null;
    query: MassLocationAndTextAnnotation_Output;
    job: RemoteJob_bytes_;
    example_path_md5: string | null;
};

export type JobProgressRequest = {
    state?: JobProgressState | null;
};

export type JobProgressState = {
    ts: number;
    t_total: number;
    t_finished: number;
    j_total: number;
    j_finished: number;
    j_waiting: number;
};

export type JobProgressStateResponse = {
    state: JobProgressState;
    diff: JobProgressState | null;
    eta_str: string | null;
};

export type LocClusterParams = {
    tl: LocPoint;
    br: LocPoint;
    url: SearchQuery;
    res: LocPoint;
    of?: number;
};

export type LocPoint = {
    latitude: number;
    longitude: number;
};

export type LocationBounds = {
    nw: LocPoint;
    se: LocPoint;
};

export type LocationCluster = {
    example_path_md5: string;
    example_classification: string | null;
    size: number;
    address_name: string | null;
    address_country: string | null;
    tsfrom: number | null;
    tsto: number | null;
    top_left: LocPoint;
    bottom_right: LocPoint;
    position: LocPoint;
};

export type LocationInfoRequest = {
    latitude: number;
    longitude: number;
};

export type LocationQueryFixedLocation = {
    t: 'FixedLocation';
    location: ManualLocation;
    override: ManualLocationOverride;
};

export type t3 = 'FixedLocation';

export type ManualLocation = {
    latitude: number;
    longitude: number;
    address_name: string | null;
    address_country: string | null;
};

export type ManualLocationOverride = 'NoLocNoMan' | 'NoLocYeMan' | 'YeLocNoMan' | 'YeLocYeMan';

export type MapSearchRequest = {
    query?: string | null;
    checkboxes?: {
        [key: string]: (boolean);
    };
};

export type MassLocationAndTextAnnotation_Input = {
    t: 'MassLocAndTxt';
    query: SearchQuery;
    location: LocationQueryFixedLocation | AnnotationOverlayInterpolateLocation | AnnotationOverlayNoLocation;
    text: TextQueryFixedText;
    date: TransDate;
};

export type t4 = 'MassLocAndTxt';

export type MassLocationAndTextAnnotation_Output = {
    t: 'MassLocAndTxt';
    query: SearchQuery;
    location: LocationQueryFixedLocation | AnnotationOverlayInterpolateLocation | AnnotationOverlayNoLocation;
    text: TextQueryFixedText;
    date: TransDate;
};

export type PathSplit = {
    dir: string;
    file: string;
};

export type PredictedLocation = {
    loc: LocPoint;
    earlier: ReferenceStats | null;
    later: ReferenceStats | null;
};

export type ProgressBarProgress = {
    desc: string | null;
    progress: number;
    total: number;
    rate: number | null;
    elapsed: number | null;
};

export type ReferenceStats = {
    distance_m: number;
    seconds: number;
};

export type RemoteJobType = 'mass_manual_annotation';

export type RemoteJob_bytes_ = {
    id_: number;
    type_: RemoteJobType;
    total: number;
    finished_tasks: number;
    original_request: (Blob | File);
    created: string;
    last_update: string | null;
    example_path_md5: string | null;
};

export type SearchQuery = {
    tag?: string;
    cls?: string;
    addr?: string;
    directory?: string;
    camera?: string;
    tsfrom?: number | null;
    tsto?: number | null;
    skip_with_location?: boolean;
    skip_being_annotated?: boolean;
    timestamp_trans?: string | null;
};

export type SortBy = 'TIMESTAMP' | 'RANDOM';

export type SortOrder = 'DESC' | 'ASC';

export type SortParams = {
    sort_by?: SortBy;
    order?: SortOrder;
};

export type State = {
    name: string;
    state: StateEnum;
    when: number;
    exception: ExceptionInfo | null;
};

export type StateEnum = 'initialized' | 'running' | 'finished' | 'unexpected finish' | 'error';

export type SystemStatus = {
    progress_bars: Array<[
        number,
        ProgressBarProgress
    ]>;
    current_state: {
        [key: string]: State;
    };
    t?: 'SystemStatus';
};

export type t5 = 'SystemStatus';

export type TextAnnotation = {
    description: string | null;
    tags: string | null;
};

export type TextAnnotationOverride = 'ExMan' | 'NoMan' | 'YeMan';

export type TextQueryFixedText = {
    t: 'FixedText';
    text: TextAnnotation;
    override: TextAnnotationOverride;
    loc_only: boolean;
};

export type t6 = 'FixedText';

export type TransDate = {
    t: 'TransDate';
    adjust_dates: boolean;
};

export type t7 = 'TransDate';

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ImageEndpointGetData = {
    hsh: number | string;
    size?: ImageSize;
};

export type ImageEndpointGetResponse = unknown;

export type LocationClustersEndpointPostData = {
    requestBody: LocClusterParams;
};

export type LocationClustersEndpointPostResponse = Array<LocationCluster>;

export type LocationBoundsEndpointPostData = {
    requestBody: SearchQuery;
};

export type LocationBoundsEndpointPostResponse = LocationBounds | null;

export type DateClustersEndpointPostData = {
    requestBody: DateClusterParams;
};

export type DateClustersEndpointPostResponse = Array<DateCluster>;

export type MassManualAnnotationEndpointPostData = {
    requestBody: MassLocationAndTextAnnotation_Input;
};

export type MassManualAnnotationEndpointPostResponse = number;

export type MapSearchEndpointPostData = {
    requestBody: MapSearchRequest;
};

export type MapSearchEndpointPostResponse = string;

export type JobProgressStatePostData = {
    requestBody: JobProgressRequest;
};

export type JobProgressStatePostResponse = JobProgressStateResponse;

export type RemoteJobsGetResponse = Array<JobDescription>;

export type SystemStatusGetResponse = SystemStatus;

export type FetchLocationInfoEndpointPostData = {
    requestBody: LocationInfoRequest;
};

export type FetchLocationInfoEndpointPostResponse = string;

export type DirectoriesEndpointPostData = {
    requestBody: SearchQuery;
};

export type DirectoriesEndpointPostResponse = string;

export type MatchingDirectoriesPostData = {
    requestBody: SearchQuery;
};

export type MatchingDirectoriesPostResponse = Array<DirectoryStats>;

export type ImagePagePostData = {
    requestBody: GalleryRequest;
};

export type ImagePagePostResponse = ImageResponse;

export type AggregateImagesPostData = {
    requestBody: AggregateQuery;
};

export type AggregateImagesPostResponse = ImageAggregation;

export type ReadIndexGetResponse = unknown;

export type ReadIndexGet1Response = unknown;

export type $OpenApiTs = {
    '/img': {
        get: {
            req: ImageEndpointGetData;
            res: {
                /**
                 * photo
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/location_clusters': {
        post: {
            req: LocationClustersEndpointPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<LocationCluster>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/bounds': {
        post: {
            req: LocationBoundsEndpointPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: LocationBounds | null;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/date_clusters': {
        post: {
            req: DateClustersEndpointPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<DateCluster>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/mass_manual_annotation': {
        post: {
            req: MassManualAnnotationEndpointPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: number;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/internal/map_search.html': {
        post: {
            req: MapSearchEndpointPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: string;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/job_progress_state': {
        post: {
            req: JobProgressStatePostData;
            res: {
                /**
                 * Successful Response
                 */
                200: JobProgressStateResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/remote_jobs': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<JobDescription>;
            };
        };
    };
    '/api/system_status': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: SystemStatus;
            };
        };
    };
    '/internal/fetch_location_info.html': {
        post: {
            req: FetchLocationInfoEndpointPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: string;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/internal/directories.html': {
        post: {
            req: DirectoriesEndpointPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: string;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/directories': {
        post: {
            req: MatchingDirectoriesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<DirectoryStats>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/images': {
        post: {
            req: ImagePagePostData;
            res: {
                /**
                 * Successful Response
                 */
                200: ImageResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/aggregate': {
        post: {
            req: AggregateImagesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: ImageAggregation;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/index.html': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
};