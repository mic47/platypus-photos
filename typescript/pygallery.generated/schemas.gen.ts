// This file is auto-generated by @hey-api/openapi-ts

export const $AggregateQuery = {
    properties: {
        query: {
            '$ref': '#/components/schemas/SearchQuery'
        }
    },
    type: 'object',
    required: ['query'],
    title: 'AggregateQuery'
} as const;

export const $AnnotationOverlayInterpolateLocation = {
    properties: {
        t: {
            type: 'string',
            enum: ['InterpolatedLocation'],
            const: 'InterpolatedLocation',
            title: 'T'
        },
        location: {
            '$ref': '#/components/schemas/ManualLocation'
        }
    },
    type: 'object',
    required: ['t', 'location'],
    title: 'AnnotationOverlayInterpolateLocation'
} as const;

export const $AnnotationOverlayNoLocation = {
    properties: {
        t: {
            type: 'string',
            enum: ['NoLocation'],
            const: 'NoLocation',
            title: 'T'
        }
    },
    type: 'object',
    required: ['t'],
    title: 'AnnotationOverlayNoLocation'
} as const;

export const $DateCluster = {
    properties: {
        example_path_md5: {
            type: 'string',
            title: 'Example Path Md5'
        },
        example_path_extension: {
            type: 'string',
            title: 'Example Path Extension'
        },
        bucket_min: {
            type: 'number',
            title: 'Bucket Min'
        },
        bucket_max: {
            type: 'number',
            title: 'Bucket Max'
        },
        overfetched: {
            type: 'boolean',
            title: 'Overfetched'
        },
        min_timestamp: {
            type: 'number',
            title: 'Min Timestamp'
        },
        max_timestamp: {
            type: 'number',
            title: 'Max Timestamp'
        },
        avg_timestamp: {
            type: 'number',
            title: 'Avg Timestamp'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        group_by: {
            '$ref': '#/components/schemas/DateClusterGroup'
        }
    },
    type: 'object',
    required: ['example_path_md5', 'example_path_extension', 'bucket_min', 'bucket_max', 'overfetched', 'min_timestamp', 'max_timestamp', 'avg_timestamp', 'total', 'group_by'],
    title: 'DateCluster'
} as const;

export const $DateClusterGroup = {
    properties: {
        address_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address Name'
        },
        country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Country'
        },
        camera: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Camera'
        },
        has_location: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Has Location'
        }
    },
    type: 'object',
    required: ['address_name', 'country', 'camera', 'has_location'],
    title: 'DateClusterGroup'
} as const;

export const $DateClusterGroupBy = {
    type: 'string',
    enum: ['country', 'camera', 'has_location', 'address_name'],
    title: 'DateClusterGroupBy'
} as const;

export const $DateClusterParams = {
    properties: {
        url: {
            '$ref': '#/components/schemas/SearchQuery'
        },
        group_by: {
            items: {
                '$ref': '#/components/schemas/DateClusterGroupBy'
            },
            type: 'array',
            title: 'Group By'
        },
        buckets: {
            type: 'integer',
            title: 'Buckets'
        }
    },
    type: 'object',
    required: ['url', 'group_by', 'buckets'],
    title: 'DateClusterParams'
} as const;

export const $DirectoryStats = {
    properties: {
        directory: {
            type: 'string',
            title: 'Directory'
        },
        total_images: {
            type: 'integer',
            title: 'Total Images'
        },
        has_location: {
            type: 'integer',
            title: 'Has Location'
        },
        has_timestamp: {
            type: 'integer',
            title: 'Has Timestamp'
        },
        being_annotated: {
            type: 'integer',
            title: 'Being Annotated'
        },
        since: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Since'
        },
        until: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Until'
        }
    },
    type: 'object',
    required: ['directory', 'total_images', 'has_location', 'has_timestamp', 'being_annotated', 'since', 'until'],
    title: 'DirectoryStats'
} as const;

export const $ExceptionInfo = {
    properties: {
        exc_type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Exc Type'
        },
        exc_val: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Exc Val'
        },
        exc_tb: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Exc Tb'
        }
    },
    type: 'object',
    required: ['exc_type', 'exc_val', 'exc_tb'],
    title: 'ExceptionInfo'
} as const;

export const $FaceIdentifier = {
    properties: {
        md5: {
            type: 'string',
            title: 'Md5'
        },
        extension: {
            type: 'string',
            title: 'Extension'
        },
        position: {
            '$ref': '#/components/schemas/Position'
        }
    },
    type: 'object',
    required: ['md5', 'extension', 'position'],
    title: 'FaceIdentifier'
} as const;

export const $FaceWithMeta = {
    properties: {
        position: {
            '$ref': '#/components/schemas/Position'
        },
        md5: {
            type: 'string',
            title: 'Md5'
        },
        extension: {
            type: 'string',
            title: 'Extension'
        },
        identity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Identity'
        },
        skip_reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Skip Reason'
        },
        embedding: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Embedding'
        }
    },
    type: 'object',
    required: ['position', 'md5', 'extension', 'identity', 'skip_reason', 'embedding'],
    title: 'FaceWithMeta'
} as const;

export const $FacesResponse = {
    properties: {
        has_next_page: {
            type: 'boolean',
            title: 'Has Next Page'
        },
        faces: {
            items: {
                '$ref': '#/components/schemas/FaceWithMeta'
            },
            type: 'array',
            title: 'Faces'
        }
    },
    type: 'object',
    required: ['has_next_page', 'faces'],
    title: 'FacesResponse'
} as const;

export const $FoundLocation = {
    properties: {
        latitude: {
            type: 'number',
            title: 'Latitude'
        },
        longitude: {
            type: 'number',
            title: 'Longitude'
        },
        address: {
            type: 'string',
            title: 'Address'
        }
    },
    type: 'object',
    required: ['latitude', 'longitude', 'address'],
    title: 'FoundLocation'
} as const;

export const $GalleryPaging = {
    properties: {
        page: {
            type: 'integer',
            title: 'Page',
            default: 0
        },
        paging: {
            type: 'integer',
            title: 'Paging',
            default: 100
        }
    },
    type: 'object',
    title: 'GalleryPaging'
} as const;

export const $GalleryRequest = {
    properties: {
        query: {
            '$ref': '#/components/schemas/SearchQuery'
        },
        paging: {
            '$ref': '#/components/schemas/GalleryPaging'
        },
        sort: {
            '$ref': '#/components/schemas/SortParams'
        }
    },
    type: 'object',
    required: ['query', 'paging', 'sort'],
    title: 'GalleryRequest'
} as const;

export const $GetAddressRequest = {
    properties: {
        latitude: {
            type: 'number',
            title: 'Latitude'
        },
        longitude: {
            type: 'number',
            title: 'Longitude'
        }
    },
    type: 'object',
    required: ['latitude', 'longitude'],
    title: 'GetAddressRequest'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $Image = {
    properties: {
        md5: {
            type: 'string',
            title: 'Md5'
        },
        extension: {
            type: 'string',
            title: 'Extension'
        },
        date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date'
        },
        date_transformed: {
            type: 'boolean',
            title: 'Date Transformed'
        },
        tags: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'number'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        classifications: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Classifications'
        },
        address: {
            '$ref': '#/components/schemas/ImageAddress'
        },
        dependent_features_last_update: {
            type: 'number',
            title: 'Dependent Features Last Update'
        },
        latitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Latitude'
        },
        longitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Longitude'
        },
        altitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Altitude'
        },
        manual_features: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Manual Features'
        },
        being_annotated: {
            type: 'boolean',
            title: 'Being Annotated'
        },
        camera: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Camera'
        },
        software: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Software'
        },
        identities: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Identities'
        },
        version: {
            type: 'integer',
            title: 'Version'
        }
    },
    type: 'object',
    required: ['md5', 'extension', 'date', 'date_transformed', 'tags', 'classifications', 'address', 'dependent_features_last_update', 'latitude', 'longitude', 'altitude', 'manual_features', 'being_annotated', 'camera', 'software', 'identities', 'version'],
    title: 'Image'
} as const;

export const $ImageAddress = {
    properties: {
        country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Country'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        full: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full'
        }
    },
    type: 'object',
    required: ['country', 'name', 'full'],
    title: 'ImageAddress'
} as const;

export const $ImageAggregation = {
    properties: {
        total: {
            type: 'integer',
            title: 'Total'
        },
        address: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Address'
        },
        tag: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Tag'
        },
        classification: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Classification'
        },
        cameras: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Cameras'
        }
    },
    type: 'object',
    required: ['total', 'address', 'tag', 'classification', 'cameras'],
    title: 'ImageAggregation'
} as const;

export const $ImageResponse = {
    properties: {
        has_next_page: {
            type: 'boolean',
            title: 'Has Next Page'
        },
        omgs: {
            items: {
                '$ref': '#/components/schemas/ImageWithMeta'
            },
            type: 'array',
            title: 'Omgs'
        },
        some_location: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ManualLocation'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['has_next_page', 'omgs', 'some_location'],
    title: 'ImageResponse'
} as const;

export const $ImageSize = {
    type: 'string',
    enum: ['original', 'medium', 'preview'],
    title: 'ImageSize'
} as const;

export const $ImageWithMeta = {
    properties: {
        omg: {
            '$ref': '#/components/schemas/Image'
        },
        predicted_location: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PredictedLocation'
                },
                {
                    type: 'null'
                }
            ]
        },
        paths: {
            items: {
                '$ref': '#/components/schemas/PathSplit'
            },
            type: 'array',
            title: 'Paths'
        }
    },
    type: 'object',
    required: ['omg', 'predicted_location', 'paths'],
    title: 'ImageWithMeta'
} as const;

export const $JobDescription = {
    properties: {
        icon: {
            type: 'string',
            title: 'Icon'
        },
        total: {
            type: 'string',
            title: 'Total'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        replacements: {
            type: 'string',
            title: 'Replacements'
        },
        time: {
            type: 'number',
            title: 'Time'
        },
        latitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Latitude'
        },
        longitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Longitude'
        },
        query: {
            '$ref': '#/components/schemas/MassLocationAndTextAnnotation-Output'
        },
        job: {
            '$ref': '#/components/schemas/RemoteJob_bytes_'
        },
        example_path_md5: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Example Path Md5'
        },
        example_path_extension: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Example Path Extension'
        }
    },
    type: 'object',
    required: ['icon', 'total', 'id', 'type', 'replacements', 'time', 'latitude', 'longitude', 'query', 'job', 'example_path_md5', 'example_path_extension'],
    title: 'JobDescription'
} as const;

export const $JobProgressRequest = {
    properties: {
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/JobProgressState'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'JobProgressRequest'
} as const;

export const $JobProgressState = {
    properties: {
        ts: {
            type: 'number',
            title: 'Ts'
        },
        t_total: {
            type: 'integer',
            title: 'T Total'
        },
        t_finished: {
            type: 'integer',
            title: 'T Finished'
        },
        j_total: {
            type: 'integer',
            title: 'J Total'
        },
        j_finished: {
            type: 'integer',
            title: 'J Finished'
        },
        j_waiting: {
            type: 'integer',
            title: 'J Waiting'
        }
    },
    type: 'object',
    required: ['ts', 't_total', 't_finished', 'j_total', 'j_finished', 'j_waiting'],
    title: 'JobProgressState'
} as const;

export const $JobProgressStateResponse = {
    properties: {
        state: {
            '$ref': '#/components/schemas/JobProgressState'
        },
        diff: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/JobProgressState'
                },
                {
                    type: 'null'
                }
            ]
        },
        eta_str: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eta Str'
        }
    },
    type: 'object',
    required: ['state', 'diff', 'eta_str'],
    title: 'JobProgressStateResponse'
} as const;

export const $LocClusterParams = {
    properties: {
        nw: {
            '$ref': '#/components/schemas/LocPoint'
        },
        se: {
            '$ref': '#/components/schemas/LocPoint'
        },
        url: {
            '$ref': '#/components/schemas/SearchQuery'
        },
        res: {
            '$ref': '#/components/schemas/LocPoint'
        },
        of: {
            type: 'number',
            title: 'Of',
            default: 0.5
        }
    },
    type: 'object',
    required: ['nw', 'se', 'url', 'res'],
    title: 'LocClusterParams'
} as const;

export const $LocPoint = {
    properties: {
        latitude: {
            type: 'number',
            title: 'Latitude'
        },
        longitude: {
            type: 'number',
            title: 'Longitude'
        }
    },
    type: 'object',
    required: ['latitude', 'longitude'],
    title: 'LocPoint'
} as const;

export const $LocationBounds = {
    properties: {
        nw: {
            '$ref': '#/components/schemas/LocPoint'
        },
        se: {
            '$ref': '#/components/schemas/LocPoint'
        }
    },
    type: 'object',
    required: ['nw', 'se'],
    title: 'LocationBounds'
} as const;

export const $LocationCluster = {
    properties: {
        example_path_md5: {
            type: 'string',
            title: 'Example Path Md5'
        },
        example_path_extension: {
            type: 'string',
            title: 'Example Path Extension'
        },
        example_classification: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Example Classification'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        address_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address Name'
        },
        address_country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address Country'
        },
        tsfrom: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tsfrom'
        },
        tsto: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tsto'
        },
        top_left: {
            '$ref': '#/components/schemas/LocPoint'
        },
        bottom_right: {
            '$ref': '#/components/schemas/LocPoint'
        },
        position: {
            '$ref': '#/components/schemas/LocPoint'
        }
    },
    type: 'object',
    required: ['example_path_md5', 'example_path_extension', 'example_classification', 'size', 'address_name', 'address_country', 'tsfrom', 'tsto', 'top_left', 'bottom_right', 'position'],
    title: 'LocationCluster'
} as const;

export const $LocationQueryFixedLocation = {
    properties: {
        t: {
            type: 'string',
            enum: ['FixedLocation'],
            const: 'FixedLocation',
            title: 'T'
        },
        location: {
            '$ref': '#/components/schemas/ManualLocation'
        },
        override: {
            '$ref': '#/components/schemas/ManualLocationOverride'
        }
    },
    type: 'object',
    required: ['t', 'location', 'override'],
    title: 'LocationQueryFixedLocation'
} as const;

export const $ManualIdentityClusterRequest = {
    properties: {
        identity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Identity'
        },
        skip_reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Skip Reason'
        },
        faces: {
            items: {
                '$ref': '#/components/schemas/FaceIdentifier'
            },
            type: 'array',
            title: 'Faces'
        }
    },
    type: 'object',
    required: ['identity', 'skip_reason', 'faces'],
    title: 'ManualIdentityClusterRequest'
} as const;

export const $ManualLocation = {
    properties: {
        latitude: {
            type: 'number',
            title: 'Latitude'
        },
        longitude: {
            type: 'number',
            title: 'Longitude'
        },
        address_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address Name'
        },
        address_country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address Country'
        }
    },
    type: 'object',
    required: ['latitude', 'longitude', 'address_name', 'address_country'],
    title: 'ManualLocation'
} as const;

export const $ManualLocationOverride = {
    type: 'string',
    enum: ['NoLocNoMan', 'NoLocYeMan', 'YeLocNoMan', 'YeLocYeMan'],
    title: 'ManualLocationOverride'
} as const;

export const $MapSearchResponse = {
    properties: {
        response: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FoundLocation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response'
        },
        error: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error'
        }
    },
    type: 'object',
    required: ['response', 'error'],
    title: 'MapSearchResponse'
} as const;

export const $MassLocationAndTextAnnotation_Input = {
    properties: {
        t: {
            type: 'string',
            enum: ['MassLocAndTxt'],
            const: 'MassLocAndTxt',
            title: 'T'
        },
        query: {
            '$ref': '#/components/schemas/SearchQuery'
        },
        location: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LocationQueryFixedLocation'
                },
                {
                    '$ref': '#/components/schemas/AnnotationOverlayInterpolateLocation'
                },
                {
                    '$ref': '#/components/schemas/AnnotationOverlayNoLocation'
                }
            ],
            title: 'Location'
        },
        text: {
            '$ref': '#/components/schemas/TextQueryFixedText'
        },
        date: {
            '$ref': '#/components/schemas/TransDate'
        }
    },
    type: 'object',
    required: ['t', 'query', 'location', 'text', 'date'],
    title: 'MassLocationAndTextAnnotation'
} as const;

export const $MassLocationAndTextAnnotation_Output = {
    properties: {
        t: {
            type: 'string',
            enum: ['MassLocAndTxt'],
            const: 'MassLocAndTxt',
            title: 'T'
        },
        query: {
            '$ref': '#/components/schemas/SearchQuery'
        },
        location: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LocationQueryFixedLocation'
                },
                {
                    '$ref': '#/components/schemas/AnnotationOverlayInterpolateLocation'
                },
                {
                    '$ref': '#/components/schemas/AnnotationOverlayNoLocation'
                }
            ],
            title: 'Location'
        },
        text: {
            '$ref': '#/components/schemas/TextQueryFixedText'
        },
        date: {
            '$ref': '#/components/schemas/TransDate'
        }
    },
    type: 'object',
    required: ['t', 'query', 'location', 'text', 'date'],
    title: 'MassLocationAndTextAnnotation'
} as const;

export const $PathSplit = {
    properties: {
        dir: {
            type: 'string',
            title: 'Dir'
        },
        file: {
            type: 'string',
            title: 'File'
        }
    },
    type: 'object',
    required: ['dir', 'file'],
    title: 'PathSplit'
} as const;

export const $Position = {
    properties: {
        left: {
            type: 'integer',
            title: 'Left'
        },
        top: {
            type: 'integer',
            title: 'Top'
        },
        right: {
            type: 'integer',
            title: 'Right'
        },
        bottom: {
            type: 'integer',
            title: 'Bottom'
        }
    },
    type: 'object',
    required: ['left', 'top', 'right', 'bottom'],
    title: 'Position'
} as const;

export const $PredictedLocation = {
    properties: {
        loc: {
            '$ref': '#/components/schemas/LocPoint'
        },
        earlier: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ReferenceStats'
                },
                {
                    type: 'null'
                }
            ]
        },
        later: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ReferenceStats'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['loc', 'earlier', 'later'],
    title: 'PredictedLocation'
} as const;

export const $ProgressBarProgress = {
    properties: {
        desc: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Desc'
        },
        progress: {
            type: 'integer',
            title: 'Progress'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        rate: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Rate'
        },
        elapsed: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Elapsed'
        }
    },
    type: 'object',
    required: ['desc', 'progress', 'total', 'rate', 'elapsed'],
    title: 'ProgressBarProgress'
} as const;

export const $ReferenceStats = {
    properties: {
        distance_m: {
            type: 'number',
            title: 'Distance M'
        },
        seconds: {
            type: 'number',
            title: 'Seconds'
        }
    },
    type: 'object',
    required: ['distance_m', 'seconds'],
    title: 'ReferenceStats'
} as const;

export const $RemoteJobType = {
    type: 'string',
    enum: ['mass_manual_annotation', 'face_cluster_annotation'],
    title: 'RemoteJobType'
} as const;

export const $RemoteJob_bytes_ = {
    properties: {
        id_: {
            type: 'integer',
            title: 'Id '
        },
        type_: {
            '$ref': '#/components/schemas/RemoteJobType'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        finished_tasks: {
            type: 'integer',
            title: 'Finished Tasks'
        },
        original_request: {
            type: 'string',
            format: 'binary',
            title: 'Original Request'
        },
        created: {
            type: 'string',
            format: 'date-time',
            title: 'Created'
        },
        last_update: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Update'
        },
        example_path_md5: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Example Path Md5'
        },
        example_path_extension: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Example Path Extension'
        }
    },
    type: 'object',
    required: ['id_', 'type_', 'total', 'finished_tasks', 'original_request', 'created', 'last_update', 'example_path_md5', 'example_path_extension'],
    title: 'RemoteJob'
} as const;

export const $SearchQuery = {
    properties: {
        tag: {
            type: 'string',
            title: 'Tag',
            default: ''
        },
        cls: {
            type: 'string',
            title: 'Cls',
            default: ''
        },
        addr: {
            type: 'string',
            title: 'Addr',
            default: ''
        },
        directory: {
            type: 'string',
            title: 'Directory',
            default: ''
        },
        camera: {
            type: 'string',
            title: 'Camera',
            default: ''
        },
        tsfrom: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tsfrom'
        },
        tsto: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tsto'
        },
        skip_with_location: {
            type: 'boolean',
            title: 'Skip With Location',
            default: false
        },
        skip_being_annotated: {
            type: 'boolean',
            title: 'Skip Being Annotated',
            default: false
        },
        timestamp_trans: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Timestamp Trans'
        }
    },
    type: 'object',
    title: 'SearchQuery'
} as const;

export const $SortBy = {
    type: 'string',
    enum: ['TIMESTAMP', 'RANDOM'],
    title: 'SortBy'
} as const;

export const $SortOrder = {
    type: 'string',
    enum: ['DESC', 'ASC'],
    title: 'SortOrder'
} as const;

export const $SortParams = {
    properties: {
        sort_by: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SortBy'
                }
            ],
            default: 'TIMESTAMP'
        },
        order: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SortOrder'
                }
            ],
            default: 'DESC'
        }
    },
    type: 'object',
    title: 'SortParams'
} as const;

export const $State = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        state: {
            '$ref': '#/components/schemas/StateEnum'
        },
        when: {
            type: 'number',
            title: 'When'
        },
        exception: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ExceptionInfo'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['name', 'state', 'when', 'exception'],
    title: 'State'
} as const;

export const $StateEnum = {
    type: 'string',
    enum: ['initialized', 'running', 'finished', 'unexpected finish', 'error'],
    title: 'StateEnum'
} as const;

export const $SystemStatus = {
    properties: {
        progress_bars: {
            items: {
                prefixItems: [
                    {
                        type: 'integer'
                    },
                    {
                        '$ref': '#/components/schemas/ProgressBarProgress'
                    }
                ],
                type: 'array',
                maxItems: 2,
                minItems: 2
            },
            type: 'array',
            title: 'Progress Bars'
        },
        current_state: {
            additionalProperties: {
                '$ref': '#/components/schemas/State'
            },
            type: 'object',
            title: 'Current State'
        },
        t: {
            type: 'string',
            enum: ['SystemStatus'],
            const: 'SystemStatus',
            title: 'T',
            default: 'SystemStatus'
        }
    },
    type: 'object',
    required: ['progress_bars', 'current_state'],
    title: 'SystemStatus'
} as const;

export const $TextAnnotation = {
    properties: {
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        tags: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        }
    },
    type: 'object',
    required: ['description', 'tags'],
    title: 'TextAnnotation'
} as const;

export const $TextAnnotationOverride = {
    type: 'string',
    enum: ['ExMan', 'NoMan', 'YeMan'],
    title: 'TextAnnotationOverride'
} as const;

export const $TextQueryFixedText = {
    properties: {
        t: {
            type: 'string',
            enum: ['FixedText'],
            const: 'FixedText',
            title: 'T'
        },
        text: {
            '$ref': '#/components/schemas/TextAnnotation'
        },
        override: {
            '$ref': '#/components/schemas/TextAnnotationOverride'
        },
        loc_only: {
            type: 'boolean',
            title: 'Loc Only'
        }
    },
    type: 'object',
    required: ['t', 'text', 'override', 'loc_only'],
    title: 'TextQueryFixedText'
} as const;

export const $TransDate = {
    properties: {
        t: {
            type: 'string',
            enum: ['TransDate'],
            const: 'TransDate',
            title: 'T'
        },
        adjust_dates: {
            type: 'boolean',
            title: 'Adjust Dates'
        }
    },
    type: 'object',
    required: ['t', 'adjust_dates'],
    title: 'TransDate'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;